description: Disable, delete and create new IAM user access keys
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  IAMUserName:
    type: String
    description: (Required) The IAM username
  AutomationAssumeRole:
    type: String
    description: The IAM role ARN that allows automation to manage keys
mainSteps:
  - name: disableAccessKeys
    action: aws:executeScript
    nextStep: deleteAccessKeys
    isEnd: false
    inputs:
      Runtime: python3.8
      Handler: handler
      Script: |
        import boto3


        def handler(events, context):
            iam = boto3.client('iam')
            user = events['IAMUserName']
            keys = iam.list_access_keys(UserName=user)['AccessKeyMetadata']
            for key in keys:
                iam.update_access_key(UserName=user, AccessKeyId=key['AccessKeyId'], Status='Inactive')
            return {"Message": "Disabled all access keys."}
      InputPayload:
        IAMUserName: '{{ IAMUserName }}'
  - name: deleteAccessKeys
    action: aws:executeScript
    nextStep: createNewAccessKey
    isEnd: false
    inputs:
      Runtime: python3.8
      Handler: handler
      Script: |
        import boto3


        def handler(events, context):
            iam = boto3.client('iam')
            user = events['IAMUserName']
            keys = iam.list_access_keys(UserName=user)['AccessKeyMetadata']
            for key in keys:
                iam.delete_access_key(UserName=user, AccessKeyId=key['AccessKeyId'])
            return {"Message": "Deleted all access keys."}
      InputPayload:
        IAMUserName: '{{ IAMUserName }}'
  - name: createNewAccessKey
    action: aws:executeScript
    isEnd: true
    inputs:
      Runtime: python3.8
      Handler: handler
      Script: |
        import boto3


        def handler(events, context):
            iam = boto3.client('iam')
            user = events['IAMUserName']
            new_key = iam.create_access_key(UserName=user)
            access_key = new_key['AccessKey']
            # Remove the CreateDate field because datetime is not JSON serializable
            access_key.pop('CreateDate', None)
            return {"NewAccessKey": access_key}
      InputPayload:
        IAMUserName: '{{ IAMUserName }}'
